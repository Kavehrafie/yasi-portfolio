---
import ToggleTheme from './ToggleTheme.astro'
import { getEntry } from 'astro:content'
import { NavigationLink } from '@/types'
import { Icon } from 'astro-icon'
import Burger from './Burger.astro'

const settings = await getEntry('setting', 'index')
const { navigation }: { navigation: NavigationLink[] } = settings.data?.header
const {slug} = Astro.params

const isCurrent = (linkSlug: string) => (slug?.startsWith('/') ? slug : '/' + slug === linkSlug)
---

<header x-data="{isOpen: false, selected: null, isAtTop: window.scrollY === 0}"
        x-init="window.addEventListener('scroll', debounce(() => { isAtTop = window.scrollY === 0 }))"
        class="sticky top-0 z-10 relative">
  <div class="container mx-auto flex w-full justify-between py-4 items-end transition-all" :class="{'backdrop-blur-sm bg-background/25': !isOpen, 'bg-background': isOpen, 'h-32': !isAtTop && isOpen, 'pt-10': isAtTop}">
    <Burger />
    <ToggleTheme />
  </div>
  <nav
    class="container mx-auto"
    x-show="isOpen"
    x-collapse
    x-collapse.duration.500ms
    aria-labelledby="nav-heading"
    :aria-expanded="isOpen"
  >
    <div class="flex h-[calc(100vh-50px)] bg-background">
      <ul class="w-full md:w-1/2 lg:w-1/3">
        {navigation.map((link) =>
          (
            Object.keys(link).includes('slug') ?
            <li>
                <a class="py-4 text-xl px-2 w-full flex relative items-center my-auto hover:bg-accent" href={link.slug}>
                    <span class:list={[{"hidden": !isCurrent(link.slug)}, "text-2xl"]}>[ </span>
                  {link.text}
                    <span class:list={[{"hidden": !isCurrent(link.slug)}, "text-2xl"]}> ]</span>
                    <!--<Icon name="ph:arrow-down-left-light" class="w-6 rotate-180"/>-->
                </a>
            </li> :
            <li>
                <button
                        class="py-4 text-xl px-2 hover:bg-accent w-full text-left transition inline-flex justify-between"
                        @click="event => selected = selected === event.target.textContent ? null : event.target.textContent"
                        :class={`{'border-b-4 border-b-primary md:border-b-0 md:border-r-4 md:border-r-primary text-muted-foreground' :selected === '${link.text}'}`}
                >
                    <span class="text-center">{link.text}</span>
                    <Icon x-show={`selected === '${link.text}'`} name="ph:arrow-left"
                          class="rotate-[90deg] md:rotate-0 w-7 text-black"/>
                </button>
                <ul
                  class="md:hidden flex flex-col"
                  x-show={`selected === '${link.text}'`}
                  x-collapse
                  x-collapse.duration.300ms>
                    {
                        link.links.map((childLink) =>
                          <li class="">
                              <a
                                class="block py-4 text-xl px-2
                              relative hover:before:absolute before:w-0.5 before:h-1 hover:before:bottom-0 before:transition-all hover:before:w-full hover:before:h-1 hover:before:bg-primary hover:before:block
                              "
                                href={childLink.slug}>
                                  {childLink.text}
                              </a>
                          </li>
                        )
                    }
                </ul>
            </li>
          )
        )}
      </ul>
      <div class="w-1/3" x-show={`selected !== null`}>
      {navigation.map((parent) =>
        (
          Object.keys(parent).includes('links') &&
          <ul
                  class="hidden md:flex flex-col"
                  x-show={`selected === '${parent.text}'`}
                  x-collapse
                  x-collapse.duration.300ms>
            {
              parent.links.map((childLink) =>
                      <li>
                          <a
                              class="flex relative items-center w-full py-4 text-xl pl-6 pr-2
                                hover:bg-accent"
                              href={childLink.slug}>
                          <span class:list={[{"hidden": !isCurrent(childLink.slug)}, "text-2xl"]}>[ </span>
                        {childLink.text}
                          <span class:list={[{"hidden": !isCurrent(childLink.slug)}, "text-2xl"]}> ]</span>
                        </a>
                      </li>
              )
            }
          </ul>
        )
      )}
      </div>
    </div>
  </nav>
</header>
